<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wow Experience</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/0.158.0/three.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: #000;
            color: #fff;
            font-family: 'Segoe UI', sans-serif;
            overflow-x: hidden;
        }

        #canvas-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            z-index: 1;
        }

        .content {
            position: relative;
            z-index: 2;
        }

        .section {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2rem;
            position: relative;
        }

        .hero {
            text-align: center;
        }

        .hero h1 {
            font-size: 5rem;
            font-weight: 900;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            opacity: 0;
        }

        .hero p {
            font-size: 1.5rem;
            margin-top: 1rem;
            opacity: 0;
        }

        .cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            padding: 2rem;
            max-width: 1200px;
            margin: 0 auto;
        }

        .card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 2rem;
            transform: translateY(100px);
            opacity: 0;
            cursor: pointer;
            transition: transform 0.3s ease;
        }

        .card:hover {
            transform: translateY(-10px) scale(1.02);
        }

        .magnetic-button {
            position: relative;
            padding: 1rem 2rem;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            border: none;
            border-radius: 30px;
            color: white;
            font-size: 1.2rem;
            cursor: pointer;
            margin-top: 2rem;
            opacity: 0;
        }

        .progress-bar {
            position: fixed;
            top: 0;
            left: 0;
            width: 0%;
            height: 5px;
            background: linear-gradient(to right, #ff6b6b, #4ecdc4);
            z-index: 1000;
        }

        .cursor {
            width: 20px;
            height: 20px;
            border: 2px solid white;
            border-radius: 50%;
            position: fixed;
            pointer-events: none;
            z-index: 9999;
            mix-blend-mode: difference;
        }

        .cursor-dot {
            width: 4px;
            height: 4px;
            background: white;
            border-radius: 50%;
            position: fixed;
            pointer-events: none;
            z-index: 9999;
            mix-blend-mode: difference;
        }
    </style>
</head>
<body>
    <div class="cursor"></div>
    <div class="cursor-dot"></div>
    <div class="progress-bar"></div>
    
    <div id="canvas-container"></div>
    
    <div class="content">
        <section class="section hero">
            <div>
                <h1>Experience Innovation</h1>
                <p>Scroll to explore the future of web design</p>
                <button class="magnetic-button">Get Started</button>
            </div>
        </section>

        <section class="section">
            <div class="cards">
                <div class="card">
                    <h2>Interactive Design</h2>
                    <p>Push the boundaries of web experiences with cutting-edge interactions.</p>
                </div>
                <div class="card">
                    <h2>Creative Animation</h2>
                    <p>Bring your content to life with smooth, engaging animations.</p>
                </div>
                <div class="card">
                    <h2>Future Ready</h2>
                    <p>Built with modern technologies for tomorrow's web.</p>
                </div>
            </div>
        </section>
    </div>

    <script>
        // Initialize GSAP
        gsap.registerPlugin(ScrollTrigger);

        // Hero animations
        gsap.to('.hero h1', {
            opacity: 1,
            duration: 1.5,
            ease: 'power4.out'
        });

        gsap.to('.hero p', {
            opacity: 1,
            duration: 1.5,
            delay: 0.5,
            ease: 'power4.out'
        });

        gsap.to('.magnetic-button', {
            opacity: 1,
            duration: 1.5,
            delay: 1,
            ease: 'power4.out'
        });

        // Card animations
        gsap.to('.card', {
            scrollTrigger: {
                trigger: '.cards',
                start: 'top center',
                toggleActions: 'play none none reverse'
            },
            opacity: 1,
            y: 0,
            duration: 1,
            stagger: 0.2,
            ease: 'power4.out'
        });

        // Progress bar
        window.addEventListener('scroll', () => {
            const totalScroll = document.documentElement.scrollHeight - window.innerHeight;
            const progress = (window.pageYOffset / totalScroll) * 100;
            document.querySelector('.progress-bar').style.width = `${progress}%`;
        });

        // Custom cursor
        const cursor = document.querySelector('.cursor');
        const cursorDot = document.querySelector('.cursor-dot');

        document.addEventListener('mousemove', (e) => {
            gsap.to(cursor, {
                x: e.clientX - 10,
                y: e.clientY - 10,
                duration: 0.23
            });
            gsap.to(cursorDot, {
                x: e.clientX - 2,
                y: e.clientY - 2,
                duration: 0.1
            });
        });

        // Magnetic button effect
        const magneticBtn = document.querySelector('.magnetic-button');
        
        magneticBtn.addEventListener('mousemove', (e) => {
            const rect = magneticBtn.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            const centerX = rect.width / 2;
            const centerY = rect.height / 2;
            
            const deltaX = x - centerX;
            const deltaY = y - centerY;
            
            gsap.to(magneticBtn, {
                x: deltaX * 0.1,
                y: deltaY * 0.1,
                duration: 0.2
            });
        });

        magneticBtn.addEventListener('mouseleave', () => {
            gsap.to(magneticBtn, {
                x: 0,
                y: 0,
                duration: 0.2
            });
        });

        // Three.js background
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });

        renderer.setSize(window.innerWidth, window.innerHeight);
        document.getElementById('canvas-container').appendChild(renderer.domElement);

        const geometry = new THREE.IcosahedronGeometry(1, 1);
        const material = new THREE.MeshBasicMaterial({
            color: 0x4ecdc4,
            wireframe: true
        });
        const sphere = new THREE.Mesh(geometry, material);

        scene.add(sphere);
        camera.position.z = 5;

        function animate() {
            requestAnimationFrame(animate);

            sphere.rotation.x += 0.001;
            sphere.rotation.y += 0.002;

            renderer.render(scene, camera);
        }

        animate();

        window.addEventListener('resize', () => {
            const width = window.innerWidth;
            const height = window.innerHeight;

            camera.aspect = width / height;
            camera.updateProjectionMatrix();

            renderer.setSize(width, height);
        });
    </script>
</body>
</html>